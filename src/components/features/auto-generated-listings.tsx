"use client";

import { useState } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { handleGenerateListing } from '@/lib/actions';
import type { GenerateListingOutput } from '@/ai/flows/auto-generated-listings';
import { Badge } from '@/components/ui/badge';
import { FileText, ImagePlus, Sparkles } from 'lucide-react';
import Image from 'next/image';

const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ACCEPTED_IMAGE_TYPES = ["image/jpeg", "image/jpg", "image/png", "image/webp"];

const FormSchema = z.object({
  productDetails: z.string().min(10, { message: "Product details must be at least 10 characters." }),
  productPhoto: z
    .custom<FileList>()
    .refine(files => files === undefined || files.length === 0 || files?.[0]?.size <= MAX_FILE_SIZE, `Max image size is 5MB.`)
    .refine(
      files => files === undefined || files.length === 0 || ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),
      "Only .jpg, .jpeg, .png and .webp formats are supported."
    ).optional(),
});

const fileToDataUri = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};

export default function AutoGeneratedListings() {
  const [isLoading, setIsLoading] = useState(false);
  const [listingResult, setListingResult] = useState<GenerateListingOutput | null>(null);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: { productDetails: '' },
  });

  const onSubmit: SubmitHandler<z.infer<typeof FormSchema>> = async (data) => {
    setIsLoading(true);
    setListingResult(null);

    let productPhotoDataUri: string | undefined = undefined;
    if (data.productPhoto && data.productPhoto.length > 0) {
      try {
        productPhotoDataUri = await fileToDataUri(data.productPhoto[0]);
      } catch (error) {
        toast({ variant: "destructive", title: "Error processing image", description: "Could not read the image file." });
        setIsLoading(false);
        return;
      }
    }

    const result = await handleGenerateListing({ 
      productDetails: data.productDetails, 
      productPhotoDataUri 
    });

    if (result.success && result.data) {
      setListingResult(result.data);
    } else {
      toast({
        variant: "destructive",
        title: "Error",
        description: result.error || "Failed to generate listing.",
      });
    }
    setIsLoading(false);
  };
  
  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      form.setValue('productPhoto', event.target.files as FileList);
      // Validate with zod before setting preview
      const validationResult = await form.trigger('productPhoto');
      if(validationResult) {
        const dataUri = await fileToDataUri(file);
        setPreviewImage(dataUri);
      } else {
        setPreviewImage(null); // Clear preview if validation fails
      }
    } else {
      setPreviewImage(null);
      form.setValue('productPhoto', undefined);
    }
  };


  return (
    <Card className="shadow-xl">
      <CardHeader>
        <CardTitle className="font-headline text-2xl flex items-center"><FileText className="mr-2 h-6 w-6 text-primary" />Auto-Generated Listings</CardTitle>
        <CardDescription>Provide product details (and optionally an image) to let AI generate a catchy title, description, and tags.</CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="productDetails"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Product Details</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., 'Brand new wireless noise-cancelling headphones, Bluetooth 5.0, 20-hour battery life, black color...'"
                      className="resize-none"
                      rows={4}
                      {...field}
                      aria-label="Product details"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="productPhoto"
              render={({ field: { onChange, value, ...restField } }) => ( // Destructure field to handle onChange manually
                <FormItem>
                  <FormLabel>Product Photo (Optional)</FormLabel>
                  <FormControl>
                     <div className="flex items-center gap-4">
                      <label htmlFor="productPhoto" className="cursor-pointer inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                        <ImagePlus className="mr-2 h-4 w-4" /> Upload Image
                      </label>
                      <Input
                        id="productPhoto"
                        type="file"
                        accept={ACCEPTED_IMAGE_TYPES.join(",")}
                        onChange={handleFileChange} // Use custom handler
                        className="hidden"
                        aria-label="Product photo upload"
                        {...restField} // Pass rest of field props like name, ref, onBlur
                      />
                      {previewImage && (
                        <div className="w-20 h-20 relative rounded-md overflow-hidden border">
                           <Image src={previewImage} alt="Preview" layout="fill" objectFit="cover" />
                        </div>
                      )}
                    </div>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" disabled={isLoading} className="w-full sm:w-auto">
              {isLoading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating...
                </>
              ) : (
                <> <Sparkles className="mr-2 h-5 w-5" /> Generate Listing </>
              )}
            </Button>
          </form>
        </Form>

        {isLoading && (
          <div className="mt-6 space-y-4">
            <Skeleton className="h-8 w-3/4" />
            <Skeleton className="h-20 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        )}

        {listingResult && (
          <Card className="mt-8 bg-muted/30">
            <CardHeader>
              <CardTitle className="font-headline text-xl">Generated Listing</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="font-semibold font-headline">Title:</h3>
                <p className="text-sm">{listingResult.title}</p>
              </div>
              <div>
                <h3 className="font-semibold font-headline">Description:</h3>
                <p className="text-sm whitespace-pre-line">{listingResult.description}</p>
              </div>
              <div>
                <h3 className="font-semibold font-headline">Tags:</h3>
                <div className="flex flex-wrap gap-2 mt-1">
                  {listingResult.tags.map((tag, index) => (
                    <Badge key={index} variant="secondary">{tag}</Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </CardContent>
    </Card>
  );
}
